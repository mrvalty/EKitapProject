// <auto-generated />
using System;
using EKitap.Inf.DATA;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EKitap.Inf.Migrations
{
    [DbContext(typeof(EKitapSatısDB))]
    [Migration("20241123200751_updateDB2")]
    partial class updateDB2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EKitap.Dom.Models.YayinEvi", b =>
                {
                    b.Property<string>("YayinEviID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("EklenmeTarihi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValue(new DateTime(2024, 11, 23, 23, 7, 50, 506, DateTimeKind.Local).AddTicks(6570));

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("KayitDurumu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("YayinEviAd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("YayinEviID");

                    b.ToTable("YayinEvleri");

                    b.HasData(
                        new
                        {
                            YayinEviID = "201",
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YayinEviAd = "Can Yayınları"
                        },
                        new
                        {
                            YayinEviID = "202",
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YayinEviAd = "Yapı Kredi Yayınları"
                        },
                        new
                        {
                            YayinEviID = "203",
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YayinEviAd = "İletişim Yayınları"
                        },
                        new
                        {
                            YayinEviID = "204",
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YayinEviAd = "Everest Yayınları"
                        },
                        new
                        {
                            YayinEviID = "205",
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YayinEviAd = "Doğan Kitap"
                        },
                        new
                        {
                            YayinEviID = "206",
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YayinEviAd = "Kırmızı Kedi Yayınları"
                        },
                        new
                        {
                            YayinEviID = "207",
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YayinEviAd = "Timaş Yayınları"
                        },
                        new
                        {
                            YayinEviID = "208",
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YayinEviAd = "Türkiye İş Bankası Kültür Yayınları"
                        },
                        new
                        {
                            YayinEviID = "209",
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YayinEviAd = "Pegasus Yayınları"
                        },
                        new
                        {
                            YayinEviID = "210",
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YayinEviAd = "Epsilon Yayınları"
                        },
                        new
                        {
                            YayinEviID = "211",
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YayinEviAd = "Penguin Random House"
                        },
                        new
                        {
                            YayinEviID = "212",
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YayinEviAd = "HarperCollins"
                        },
                        new
                        {
                            YayinEviID = "213",
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YayinEviAd = "Simon & Schuster"
                        },
                        new
                        {
                            YayinEviID = "214",
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YayinEviAd = "Macmillan Publishers"
                        },
                        new
                        {
                            YayinEviID = "215",
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YayinEviAd = "Hachette Livre"
                        });
                });

            modelBuilder.Entity("EKitap.Dom.Models.Yazar", b =>
                {
                    b.Property<int>("YazarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YazarID"));

                    b.Property<DateTime>("EklenmeTarihi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValue(new DateTime(2024, 11, 23, 23, 7, 50, 507, DateTimeKind.Local).AddTicks(9178));

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("KayitDurumu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("YazarAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("YazarID");

                    b.ToTable("Yazarlar");

                    b.HasData(
                        new
                        {
                            YazarID = 201,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Ahmet Hamdi Tanpınar"
                        },
                        new
                        {
                            YazarID = 202,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Yaşar Kemal"
                        },
                        new
                        {
                            YazarID = 203,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Orhan Pamuk"
                        },
                        new
                        {
                            YazarID = 204,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Sabahattin Ali"
                        },
                        new
                        {
                            YazarID = 205,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Nazım Hikmet"
                        },
                        new
                        {
                            YazarID = 206,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Halide Edib Adıvar"
                        },
                        new
                        {
                            YazarID = 207,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Reşat Nuri Güntekin"
                        },
                        new
                        {
                            YazarID = 208,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Oğuz Atay"
                        },
                        new
                        {
                            YazarID = 209,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Peyami Safa"
                        },
                        new
                        {
                            YazarID = 210,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Elif Şafak"
                        },
                        new
                        {
                            YazarID = 211,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "J.K. Rowling"
                        },
                        new
                        {
                            YazarID = 212,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "George Orwell"
                        },
                        new
                        {
                            YazarID = 213,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "J.R.R. Tolkien"
                        },
                        new
                        {
                            YazarID = 214,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Agatha Christie"
                        },
                        new
                        {
                            YazarID = 215,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Fyodor Dostoevsky"
                        },
                        new
                        {
                            YazarID = 216,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Leo Tolstoy"
                        },
                        new
                        {
                            YazarID = 217,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Ernest Hemingway"
                        },
                        new
                        {
                            YazarID = 218,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Jane Austen"
                        },
                        new
                        {
                            YazarID = 219,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Mark Twain"
                        },
                        new
                        {
                            YazarID = 220,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Franz Kafka"
                        },
                        new
                        {
                            YazarID = 221,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Charles Dickens"
                        },
                        new
                        {
                            YazarID = 222,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Gabriel Garcia Marquez"
                        },
                        new
                        {
                            YazarID = 223,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Haruki Murakami"
                        },
                        new
                        {
                            YazarID = 224,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Stephen King"
                        },
                        new
                        {
                            YazarID = 225,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Victor Hugo"
                        },
                        new
                        {
                            YazarID = 226,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 0,
                            YazarAdi = "Virginia Woolf"
                        });
                });

            modelBuilder.Entity("EKitap.Domain.Models.Kategori", b =>
                {
                    b.Property<int>("KategoriID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategoriID"));

                    b.Property<DateTime>("EklenmeTarihi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValue(new DateTime(2024, 11, 23, 23, 7, 50, 384, DateTimeKind.Local).AddTicks(1705));

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("KategoriAdi")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<int>("KayitDurumu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("smalldatetime");

                    b.HasKey("KategoriID");

                    b.ToTable("Kategoriler");

                    b.HasData(
                        new
                        {
                            KategoriID = 101,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Roman",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 102,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Hikaye",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 103,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Bilim Kurgu",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 104,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Fantastik",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 105,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Tarih",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 106,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Biyografi",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 107,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Otobiyografi",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 108,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Felsefe",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 109,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Psikoloji",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 110,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Klasikler",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 111,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Şiir",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 112,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Kişisel Gelişim",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 113,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Çocuk Kitapları",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 114,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Edebiyat",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 115,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Sanat",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 116,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Din",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 117,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Gezi",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 118,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Araştırma-İnceleme",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 119,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Mizah",
                            KayitDurumu = 0
                        },
                        new
                        {
                            KategoriID = 120,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KategoriAdi = "Ansiklopedi",
                            KayitDurumu = 0
                        });
                });

            modelBuilder.Entity("EKitap.Domain.Models.Kitap", b =>
                {
                    b.Property<int>("KitapID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KitapID"));

                    b.Property<string>("Aciklama")
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("EklenmeTarihi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValue(new DateTime(2024, 11, 23, 23, 7, 50, 384, DateTimeKind.Local).AddTicks(5099));

                    b.Property<decimal>("Fiyat")
                        .HasColumnType("money");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("KategoriID")
                        .HasColumnType("int");

                    b.Property<int>("KayitDurumu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("KitapAdi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("KitapResmi")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasDefaultValue("bosResim.jpg");

                    b.Property<int>("KullaniciID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("StokAdedi")
                        .HasColumnType("int");

                    b.Property<string>("YayinEviID")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("YazarID")
                        .HasColumnType("int");

                    b.HasKey("KitapID");

                    b.HasIndex("KategoriID");

                    b.HasIndex("KullaniciID");

                    b.HasIndex("YayinEviID");

                    b.HasIndex("YazarID");

                    b.ToTable("Kitaplar");
                });

            modelBuilder.Entity("EKitap.Domain.Models.KitapYazar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("EklenmeTarihi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValue(new DateTime(2024, 11, 23, 23, 7, 50, 384, DateTimeKind.Local).AddTicks(9003));

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("KategoriID")
                        .HasColumnType("int");

                    b.Property<string>("Kategoriler")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KayitDurumu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("KitapID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("YazarID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KategoriID");

                    b.HasIndex("KitapID");

                    b.HasIndex("YazarID");

                    b.ToTable("KitapYazarlar");
                });

            modelBuilder.Entity("EKitap.Domain.Models.Kullanici", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Soyad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Ad = "Bilge",
                            ConcurrencyStamp = "dc64e402-5695-41a4-81fb-f7c2a36c8f73",
                            Email = "bilgeadam@deneme.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BILGEADAM@DENEME.COM",
                            NormalizedUserName = "BLGADM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB0MuC/sJDSYKC0sG6Z1xJC4P/KNItDhXdG9QtPLjv/ISwSw2VaP/dnTXvC3JD4+JQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e84de9b4-1ddb-4a80-af2f-ce3d240c13d7",
                            Soyad = "Adam",
                            TwoFactorEnabled = false,
                            UserName = "blgAdm"
                        });
                });

            modelBuilder.Entity("EKitap.Domain.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "d265c286-c1b4-4348-942d-afc4062c79c4",
                            Name = "Yonetici",
                            NormalizedName = "YONETICI"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "98cb1992-e146-4faa-acf2-32826ab431c0",
                            Name = "Kullanici",
                            NormalizedName = "KULLANICI"
                        });
                });

            modelBuilder.Entity("EKitap.Domain.Models.Sepet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<short>("Adet")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("EklenmeTarihi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValue(new DateTime(2024, 11, 23, 23, 7, 50, 505, DateTimeKind.Local).AddTicks(9521));

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("KayitDurumu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("KitapID")
                        .HasColumnType("int");

                    b.Property<int?>("KullaniciID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("smalldatetime");

                    b.HasKey("ID");

                    b.HasIndex("KitapID");

                    b.HasIndex("KullaniciID");

                    b.ToTable("Sepetler");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EKitap.Domain.Models.Kitap", b =>
                {
                    b.HasOne("EKitap.Domain.Models.Kategori", "Kategori")
                        .WithMany("Kitaplar")
                        .HasForeignKey("KategoriID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EKitap.Domain.Models.Kullanici", "Kullanici")
                        .WithMany("Kitaplar")
                        .HasForeignKey("KullaniciID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EKitap.Dom.Models.YayinEvi", "YayinEvi")
                        .WithMany("Kitaplar")
                        .HasForeignKey("YayinEviID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EKitap.Dom.Models.Yazar", "Yazar")
                        .WithMany("Kitaplar")
                        .HasForeignKey("YazarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategori");

                    b.Navigation("Kullanici");

                    b.Navigation("YayinEvi");

                    b.Navigation("Yazar");
                });

            modelBuilder.Entity("EKitap.Domain.Models.KitapYazar", b =>
                {
                    b.HasOne("EKitap.Domain.Models.Kategori", null)
                        .WithMany("KitapYazarlar")
                        .HasForeignKey("KategoriID");

                    b.HasOne("EKitap.Domain.Models.Kitap", "Kitap")
                        .WithMany("KitapYazar")
                        .HasForeignKey("KitapID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EKitap.Dom.Models.Yazar", "Yazar")
                        .WithMany()
                        .HasForeignKey("YazarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kitap");

                    b.Navigation("Yazar");
                });

            modelBuilder.Entity("EKitap.Domain.Models.Sepet", b =>
                {
                    b.HasOne("EKitap.Domain.Models.Kitap", "Kitap")
                        .WithMany("Sepet")
                        .HasForeignKey("KitapID");

                    b.HasOne("EKitap.Domain.Models.Kullanici", "Kullanici")
                        .WithMany("Sepet")
                        .HasForeignKey("KullaniciID");

                    b.Navigation("Kitap");

                    b.Navigation("Kullanici");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("EKitap.Domain.Models.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EKitap.Domain.Models.Kullanici", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EKitap.Domain.Models.Kullanici", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("EKitap.Domain.Models.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EKitap.Domain.Models.Kullanici", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EKitap.Domain.Models.Kullanici", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EKitap.Dom.Models.YayinEvi", b =>
                {
                    b.Navigation("Kitaplar");
                });

            modelBuilder.Entity("EKitap.Dom.Models.Yazar", b =>
                {
                    b.Navigation("Kitaplar");
                });

            modelBuilder.Entity("EKitap.Domain.Models.Kategori", b =>
                {
                    b.Navigation("KitapYazarlar");

                    b.Navigation("Kitaplar");
                });

            modelBuilder.Entity("EKitap.Domain.Models.Kitap", b =>
                {
                    b.Navigation("KitapYazar");

                    b.Navigation("Sepet");
                });

            modelBuilder.Entity("EKitap.Domain.Models.Kullanici", b =>
                {
                    b.Navigation("Kitaplar");

                    b.Navigation("Sepet");
                });
#pragma warning restore 612, 618
        }
    }
}
